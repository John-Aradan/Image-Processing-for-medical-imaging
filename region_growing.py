# -*- coding: utf-8 -*-
"""Region Growing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DoC878FMRviz8JC-0EVtpfE_qRL8NpvQ
"""

import cv2
from IPython.display import Image, display
from matplotlib import pyplot as plt

def imshow(img, ax=None):
    if ax is None:
        ret, encoded = cv2.imencode(".jpg", img)
        display(Image(encoded))
    else:
        ax.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
        ax.axis('off')

import numpy as np
import cv2
import matplotlib.pyplot as plt

# Load the image
image = cv2.imread("/content/segment-R_022.png", 0)  # Load the image in grayscale

# Parameters for region growing
seed_point = (175, 319)  # Starting seed point for region growing
threshold = 70  # Threshold for region growing

# Region growing segmentation function
def region_growing(image, seed_point, threshold):
    height, width = image.shape[:2]
    segmented = np.zeros_like(image)
    visited = np.zeros_like(image)

    # Define neighbors
    neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]

    # Create a stack for storing pixel coordinates
    stack = []
    stack.append(seed_point)

    while stack:
        x, y = stack.pop()

        if visited[x, y] == 1:
            continue

        visited[x, y] = 1

        if abs(int(image[x, y]) - int(image[seed_point])) <= threshold:
            segmented[x, y] = image[x, y]
            for dx, dy in neighbors:
                nx, ny = x + dx, y + dy
                if nx >= 0 and ny >= 0 and nx < height and ny < width:
                    stack.append((nx, ny))

    return segmented

# Perform region growing segmentation
segmented_image = region_growing(image, seed_point, threshold)

imshow(segmented_image)

# Display the original and segmented images
fig, ax = plt.subplots(1, 2, figsize=(10, 5))
ax[0].imshow(image)
ax[0].set_title("Original Image")
ax[0].axis("off")
ax[1].imshow(segmented_image)
ax[1].set_title("Segmented Image")
ax[1].axis("off")
plt.show()